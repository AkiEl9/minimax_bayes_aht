import dataclasses
import os

import fire
from meltingpot_lib.examples.rllib.utils import MeltingPotEnv
from meltingpot_lib.examples.rllib.wrappers.downsamplesubstrate_wrapper import DownSamplingSubstrateWrapper
from meltingpot_lib.meltingpot import scenario
from meltingpot_lib.meltingpot.configs import substrates as substrate_configs
from ray import tune
from ray.rllib.algorithms.registry import ALGORITHMS
from ray.tune import register_env

from configs import get_exp_config
from environments.rllib.scenario_wrapper import ScenarioWrapperDict

num_workers = min([os.cpu_count() - 2, 64])

def train(
        scenario_id,
        substrate="collaborative_cooking__circuit",
        gpu=0,
):

    scenario_name = f"{substrate}_{scenario_id}"
    exp_config = get_exp_config(substrate)()
    env_config = exp_config.env_config()

    def maker(conf):
        scenario_config = scenario.get_config(scenario_name)
        env = scenario.build_from_config(scenario_config)
        return MeltingPotEnv(env=env) #ScenarioWrapperDict(MeltingPotEnv)(env=env, num_scenarios=1)

    register_env(scenario_name, maker)

    ALGO = exp_config.algo
    config = ALGORITHMS[ALGO]()[1].training(
        model={
            "custom_model": exp_config.model_path,
            "max_seq_len": 20,
            "custom_model_config": {
                "multi_values": False
            }
        }
    ).rollouts(
        num_rollout_workers=num_workers,
        sample_async=False,
        create_env_on_local_worker=False,
        num_envs_per_worker=1,
        rollout_fragment_length=exp_config.rollout_fragment_length,
        batch_mode="truncate_episodes",
        enable_connectors=True,
    ).environment(
        env=scenario_name,
        env_config=env_config
    ).resources(num_gpus=gpu
                ).framework(framework="tf"
                            ).experimental(
        _disable_preprocessor_api=True
    )

    exp = tune.run(
        ALGO,
        name=f"meltingpot_scenario_exploit",
        config=exp_config.setup_training_config(config),
        checkpoint_at_end=True,
        checkpoint_freq=100,
        keep_checkpoints_num=3,
        stop={
            "timesteps_total": exp_config.bf_sdgda_samples,
        },
    )


if __name__ == '__main__':
    fire.Fire(train)